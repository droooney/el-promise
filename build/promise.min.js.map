{"version":3,"file":"promise.min.js","sources":["../lib/global.js","../lib/isFunction.js","../lib/Promise.js","../browser.js"],"sourcesContent":["/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","export default (value) => (\n  typeof value === 'function'\n);\n","import isFunction from './isFunction';\n\n/**\n * @callback onFulfilledOrRejected\n * @public\n */\n\n/**\n * @callback onRejected\n * @public\n * @param {Error|*} err - Promise error.\n */\n\n/**\n * @callback onFulfilled\n * @public\n * @param {*} value - Promise value.\n */\n\nconst secret = {};\nconst iterator = global.Symbol\n  ? global.Symbol.iterator\n  : Math.random().toString(36);\nconst { toString } = {};\n\n/**\n * @class Promise\n * @public\n * @param {Function} executor - Function that takes two arguments: resolve and reject functions.\n * Call the resolve function when you need to fulfill the promise and call the reject one\n * when you need to reject it.\n * @returns {Promise} Instance of Promise.\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n * @description Class with almost identical API to\n * [ES6 Promise]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}.\n * There is a couple differences: set Promise.onError to a function with which you want to\n * subscribe to a promise error and set Promise.onUnhandledRejection to a function with which\n * you want to subscribe to an unhandled error\n * (defaults to console.error.bind(console, '%s %o', 'Uncaught (in promise)')).\n */\nclass Promise {\n  constructor(executor) {\n    if (!isFunction(executor)) {\n      throw new TypeError(`Promise resolver ${ toString.call(executor) } is not a function`);\n    }\n\n    let hiddenStatus;\n    let hiddenValue;\n\n    const\tonFulfill = [];\n    const onReject = [];\n    const realPromise = this;\n    const hiddenPromise = {\n      handled: false,\n      get status() {\n        return hiddenStatus;\n      },\n      set status(value) {\n        hiddenStatus = value;\n        realPromise.status = value;\n      },\n      get value() {\n        return hiddenValue;\n      },\n      set value(val) {\n        hiddenValue = val;\n        realPromise.value = val;\n      }\n    };\n\n    hiddenPromise.status = 'pending';\n    hiddenPromise.value = undefined;\n\n    Object.defineProperties(this.$$ = {}, {\n      handled: {\n        get() {\n          return hiddenPromise.handled;\n        },\n        set(key) {\n          if (key === secret) {\n            hiddenPromise.handled = true;\n          }\n        }\n      },\n      handle: {\n        value(status, f, resolve, reject, key) {\n          if (key === secret) {\n            let proxy = null;\n\n            if (isFunction(f)) {\n              proxy = (value) => {\n                try {\n                  resolve(f(value));\n                } catch (err) {\n                  reject(err);\n                }\n              };\n            }\n\n            if (status === 'resolve') {\n              onFulfill.push(proxy || ((value) => resolve(value)));\n            } else if (status === 'reject') {\n              onReject.push(proxy || ((err) => reject(err)));\n            }\n          }\n        }\n      },\n      status: {\n        get() {\n          return hiddenPromise.status;\n        }\n      },\n      value: {\n        get() {\n          return hiddenPromise.value;\n        }\n      }\n    });\n\n    try {\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n\n    function reject(err) {\n      if (hiddenPromise.status === 'pending') {\n        hiddenPromise.status = 'rejected';\n        hiddenPromise.value = err;\n\n        for (let i = 0, length = onReject.length; i < length; i++) {\n          hiddenPromise.handled = true;\n\n          onReject[i](err);\n        }\n\n        const {\n          onUnhandledRejection,\n          onError\n        } = Promise;\n\n        if (isFunction(onError)) {\n          onError(err);\n        }\n\n        setTimeout(() => {\n          if (!hiddenPromise.handled && isFunction(onUnhandledRejection)) {\n            onUnhandledRejection(err);\n          }\n        }, 1);\n      }\n    }\n\n    function resolve(value) {\n      if (hiddenPromise.status === 'pending') {\n        if (value && isFunction(value.then)) {\n          return value.then((value) => {\n            resolve(value);\n          }, (err) => {\n            reject(err);\n          });\n        }\n\n        hiddenPromise.status = 'fulfilled';\n        hiddenPromise.value = value;\n\n        for (let i = 0, length = onFulfill.length; i < length; i++) {\n          hiddenPromise.handled = true;\n\n          onFulfill[i](value);\n        }\n      }\n    }\n  }\n\n  /**\n   * @method Promise.all\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\n   * or any values.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\n   */\n  static all(iterable) {\n    const array = [];\n\n    let toResolve = 0;\n\n    if (iterable[iterator]) {\n      iterable = iterable[iterator]();\n\n      return new Promise((resolve, reject) => {\n        let next;\n        let i = 0;\n\n        while (!(next = iterable.next()).done) {\n          const promise = Promise.resolve(next.value);\n\n          toResolve++;\n\n          ((i) => {\n            promise.then((value) => {\n              toResolve--;\n              array[i] = value;\n\n              setTimeout(() => {\n                if (next.done && !toResolve) {\n                  resolve(array);\n                }\n              }, 1);\n            }, reject);\n          })(i++);\n        }\n\n        if (!i) {\n          return Promise.resolve([]);\n        }\n      });\n    }\n\n    const length = iterable.length;\n\n    if (!length) {\n      return Promise.resolve([]);\n    }\n\n    toResolve = length;\n\n    return new Promise((resolve, reject) => {\n      for (let i = 0; i < length; i++) {\n        const promise = Promise.resolve(iterable[i]);\n\n        promise.then((value) => {\n          toResolve--;\n          array[i] = value;\n\n          if (!toResolve) {\n            resolve(array);\n          }\n        }, reject);\n      }\n    });\n  }\n\n  /**\n   * @method Promise.race\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\n   * or any values.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\n   */\n  static race(iterable) {\n    if (iterable[iterator]) {\n      iterable = iterable[iterator]();\n\n      return new Promise((resolve, reject) => {\n        let next;\n\n        while (!(next = iterable.next()).done) {\n          next.value.then(resolve, reject);\n        }\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      for (let i = 0, length = iterable.length; i < length; i++) {\n        iterable[i].then(resolve, reject);\n      }\n    });\n  }\n\n  /**\n   * @method Promise.reject\n   * @param {*} [value] - Value to reject.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\n   */\n  static reject(value) {\n    return new Promise((resolve, reject) => {\n      reject(value);\n    });\n  }\n\n  /**\n   * @method Promise.resolve\n   * @param {Promise|Thenable|*} [value] - Promise, thenable or any value to resolve.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\n   */\n  static resolve(value) {\n    if (value && isFunction(value.then)) {\n      return value;\n    }\n\n    return new Promise((resolve) => {\n      resolve(value);\n    });\n  }\n\n  abort() {}\n\n  /**\n   * @method Promise#catch\n   * @param {onRejected} onRejected - onRejected callback.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\n   */\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * @method Promise#finally\n   * @public\n   * @param {onFulfilledOrRejected} onFulfilledOrRejected - onFulfilledOrRejected callback.\n   * @returns {Promise}\n   * @description Method for catching both fulfilled and rejected promises.\n   *\n   * @example\n   * spinner.show();\n   * fetchData()\n   *   .then((data) => {\n   *     // do something with data\n   *   })\n   *   .catch((err) => {\n   *     // handle error somehow\n   *   })\n   *   .finally(() => {\n   *     spinner.hide();\n   *   });\n   */\n  finally(onFulfilledOrRejected) {\n    const isFunc = isFunction(onFulfilledOrRejected);\n\n    return this.then((value) => (\n      Promise\n        .resolve(\n          isFunc\n            ? onFulfilledOrRejected()\n            : 0\n        )\n        .then(() => value)\n    ), (err) => (\n      Promise\n        .resolve(\n          isFunc\n            ? onFulfilledOrRejected()\n            : 0\n        )\n        .then(() => Promise.reject(err))\n    ));\n  }\n\n  /**\n   * @method Promise#then\n   * @param {onFulfilled} [onFulfilled] - onFulfilled callback.\n   * @param {onRejected} [onRejected] - onRejected callback.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n   */\n  then(onFulfilled, onRejected) {\n    const promise = this.$$;\n\n    if (promise.status === 'pending') {\n      return new Promise((resolve, reject) => {\n        promise.handle('reject', onRejected, resolve, reject, secret);\n        promise.handle('resolve', onFulfilled, resolve, reject, secret);\n      });\n    }\n\n    promise.handled = secret;\n\n    const { value } = promise;\n\n    let method;\n    let handler;\n\n    if (promise.status === 'fulfilled') {\n      method = 'resolve';\n      handler = onFulfilled;\n    } else {\n      method = 'reject';\n      handler = onRejected;\n    }\n\n    if (!isFunction(handler)) {\n      return Promise[method](value);\n    }\n\n    try {\n      return Promise.resolve(handler(value));\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n}\n\nPromise.onError = null;\nPromise.onUnhandledRejection = console.error.bind(console, '%s %o', 'Uncaught (in promise)');\n\nexport default Promise;\n","import Promise from './lib/Promise';\n\nwindow.Promise = Promise;\n"],"names":["window","global","self","value","secret","iterator","Symbol","Math","random","toString","Promise","executor","reject","err","hiddenPromise","status","i","length","onReject","handled","onUnhandledRejection","onError","isFunction","resolve","then","onFulfill","TypeError","call","hiddenStatus","hiddenValue","realPromise","this","val","undefined","defineProperties","$$","key","f","proxy","push","onRejected","onFulfilledOrRejected","isFunc","onFulfilled","promise","handle","method","handler","iterable","array","toResolve","next","done","console","error","bind"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}