{"version":3,"file":"promise.js","sources":["../lib/global.js","../lib/isFunction.js","../lib/Promise.js","../browser.js"],"sourcesContent":["/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","export default (value) => (\n  typeof value === 'function'\n);\n","import isFunction from './isFunction';\n\n/**\n * @callback onFulfilledOrRejected\n * @public\n */\n\n/**\n * @callback onRejected\n * @public\n * @param {Error|*} err - Promise error.\n */\n\n/**\n * @callback onFulfilled\n * @public\n * @param {*} value - Promise value.\n */\n\nconst secret = {};\nconst iterator = global.Symbol\n  ? global.Symbol.iterator\n  : Math.random().toString(36);\nconst { toString } = {};\n\n/**\n * @class Promise\n * @public\n * @param {Function} executor - Function that takes two arguments: resolve and reject functions.\n * Call the resolve function when you need to fulfill the promise and call the reject one\n * when you need to reject it.\n * @returns {Promise} Instance of Promise.\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n * @description Class with almost identical API to\n * [ES6 Promise]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}.\n * There is a couple differences: set Promise.onError to a function with which you want to\n * subscribe to a promise error and set Promise.onUnhandledRejection to a function with which\n * you want to subscribe to an unhandled error\n * (defaults to console.error.bind(console, '%s %o', 'Uncaught (in promise)')).\n */\nclass Promise {\n  constructor(executor) {\n    if (!isFunction(executor)) {\n      throw new TypeError(`Promise resolver ${ toString.call(executor) } is not a function`);\n    }\n\n    let hiddenStatus;\n    let hiddenValue;\n\n    const\tonFulfill = [];\n    const onReject = [];\n    const realPromise = this;\n    const hiddenPromise = {\n      handled: false,\n      get status() {\n        return hiddenStatus;\n      },\n      set status(value) {\n        hiddenStatus = value;\n        realPromise.status = value;\n      },\n      get value() {\n        return hiddenValue;\n      },\n      set value(val) {\n        hiddenValue = val;\n        realPromise.value = val;\n      }\n    };\n\n    hiddenPromise.status = 'pending';\n    hiddenPromise.value = undefined;\n\n    Object.defineProperties(this.$$ = {}, {\n      handled: {\n        get() {\n          return hiddenPromise.handled;\n        },\n        set(key) {\n          if (key === secret) {\n            hiddenPromise.handled = true;\n          }\n        }\n      },\n      handle: {\n        value(status, f, resolve, reject, key) {\n          if (key === secret) {\n            let proxy = null;\n\n            if (isFunction(f)) {\n              proxy = (value) => {\n                try {\n                  resolve(f(value));\n                } catch (err) {\n                  reject(err);\n                }\n              };\n            }\n\n            if (status === 'resolve') {\n              onFulfill.push(proxy || ((value) => resolve(value)));\n            } else if (status === 'reject') {\n              onReject.push(proxy || ((err) => reject(err)));\n            }\n          }\n        }\n      },\n      status: {\n        get() {\n          return hiddenPromise.status;\n        }\n      },\n      value: {\n        get() {\n          return hiddenPromise.value;\n        }\n      }\n    });\n\n    try {\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n\n    function reject(err) {\n      if (hiddenPromise.status === 'pending') {\n        hiddenPromise.status = 'rejected';\n        hiddenPromise.value = err;\n\n        for (let i = 0, length = onReject.length; i < length; i++) {\n          hiddenPromise.handled = true;\n\n          onReject[i](err);\n        }\n\n        const {\n          onUnhandledRejection,\n          onError\n        } = Promise;\n\n        if (isFunction(onError)) {\n          onError(err);\n        }\n\n        setTimeout(() => {\n          if (!hiddenPromise.handled && isFunction(onUnhandledRejection)) {\n            onUnhandledRejection(err);\n          }\n        }, 1);\n      }\n    }\n\n    function resolve(value) {\n      if (hiddenPromise.status === 'pending') {\n        if (value && isFunction(value.then)) {\n          return value.then((value) => {\n            resolve(value);\n          }, (err) => {\n            reject(err);\n          });\n        }\n\n        hiddenPromise.status = 'fulfilled';\n        hiddenPromise.value = value;\n\n        for (let i = 0, length = onFulfill.length; i < length; i++) {\n          hiddenPromise.handled = true;\n\n          onFulfill[i](value);\n        }\n      }\n    }\n  }\n\n  /**\n   * @method Promise.all\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\n   * or any values.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\n   */\n  static all(iterable) {\n    const array = [];\n\n    let toResolve = 0;\n\n    if (iterable[iterator]) {\n      iterable = iterable[iterator]();\n\n      return new Promise((resolve, reject) => {\n        let next;\n        let i = 0;\n\n        while (!(next = iterable.next()).done) {\n          const promise = Promise.resolve(next.value);\n\n          toResolve++;\n\n          ((i) => {\n            promise.then((value) => {\n              toResolve--;\n              array[i] = value;\n\n              setTimeout(() => {\n                if (next.done && !toResolve) {\n                  resolve(array);\n                }\n              }, 1);\n            }, reject);\n          })(i++);\n        }\n\n        if (!i) {\n          return Promise.resolve([]);\n        }\n      });\n    }\n\n    const length = iterable.length;\n\n    if (!length) {\n      return Promise.resolve([]);\n    }\n\n    toResolve = length;\n\n    return new Promise((resolve, reject) => {\n      for (let i = 0; i < length; i++) {\n        const promise = Promise.resolve(iterable[i]);\n\n        promise.then((value) => {\n          toResolve--;\n          array[i] = value;\n\n          if (!toResolve) {\n            resolve(array);\n          }\n        }, reject);\n      }\n    });\n  }\n\n  /**\n   * @method Promise.race\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\n   * or any values.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\n   */\n  static race(iterable) {\n    if (iterable[iterator]) {\n      iterable = iterable[iterator]();\n\n      return new Promise((resolve, reject) => {\n        let next;\n\n        while (!(next = iterable.next()).done) {\n          next.value.then(resolve, reject);\n        }\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      for (let i = 0, length = iterable.length; i < length; i++) {\n        iterable[i].then(resolve, reject);\n      }\n    });\n  }\n\n  /**\n   * @method Promise.reject\n   * @param {*} [value] - Value to reject.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\n   */\n  static reject(value) {\n    return new Promise((resolve, reject) => {\n      reject(value);\n    });\n  }\n\n  /**\n   * @method Promise.resolve\n   * @param {Promise|Thenable|*} [value] - Promise, thenable or any value to resolve.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\n   */\n  static resolve(value) {\n    if (value && isFunction(value.then)) {\n      return value;\n    }\n\n    return new Promise((resolve) => {\n      resolve(value);\n    });\n  }\n\n  abort() {}\n\n  /**\n   * @method Promise#catch\n   * @param {onRejected} onRejected - onRejected callback.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\n   */\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * @method Promise#finally\n   * @public\n   * @param {onFulfilledOrRejected} onFulfilledOrRejected - onFulfilledOrRejected callback.\n   * @returns {Promise}\n   * @description Method for catching both fulfilled and rejected promises.\n   *\n   * @example\n   * spinner.show();\n   * fetchData()\n   *   .then((data) => {\n   *     // do something with data\n   *   })\n   *   .catch((err) => {\n   *     // handle error somehow\n   *   })\n   *   .finally(() => {\n   *     spinner.hide();\n   *   });\n   */\n  finally(onFulfilledOrRejected) {\n    const isFunc = isFunction(onFulfilledOrRejected);\n\n    return this.then((value) => (\n      Promise\n        .resolve(\n          isFunc\n            ? onFulfilledOrRejected()\n            : 0\n        )\n        .then(() => value)\n    ), (err) => (\n      Promise\n        .resolve(\n          isFunc\n            ? onFulfilledOrRejected()\n            : 0\n        )\n        .then(() => Promise.reject(err))\n    ));\n  }\n\n  /**\n   * @method Promise#then\n   * @param {onFulfilled} [onFulfilled] - onFulfilled callback.\n   * @param {onRejected} [onRejected] - onRejected callback.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n   */\n  then(onFulfilled, onRejected) {\n    const promise = this.$$;\n\n    if (promise.status === 'pending') {\n      return new Promise((resolve, reject) => {\n        promise.handle('reject', onRejected, resolve, reject, secret);\n        promise.handle('resolve', onFulfilled, resolve, reject, secret);\n      });\n    }\n\n    promise.handled = secret;\n\n    const { value } = promise;\n\n    let method;\n    let handler;\n\n    if (promise.status === 'fulfilled') {\n      method = 'resolve';\n      handler = onFulfilled;\n    } else {\n      method = 'reject';\n      handler = onRejected;\n    }\n\n    if (!isFunction(handler)) {\n      return Promise[method](value);\n    }\n\n    try {\n      return Promise.resolve(handler(value));\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n}\n\nPromise.onError = null;\nPromise.onUnhandledRejection = console.error.bind(console, '%s %o', 'Uncaught (in promise)');\n\nexport default Promise;\n","import Promise from './lib/Promise';\n\nwindow.Promise = Promise;\n"],"names":["window","global","self","value","secret","iterator","Symbol","Math","random","toString","Promise","executor","isFunction","TypeError","call","hiddenStatus","hiddenValue","onFulfill","onReject","realPromise","hiddenPromise","status","val","undefined","defineProperties","$$","handled","key","f","resolve","reject","proxy","err","push","i","length","onUnhandledRejection","onError","then","onRejected","onFulfilledOrRejected","isFunc","onFulfilled","promise","handle","method","handler","iterable","array","toResolve","next","done","console","error","bind"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}